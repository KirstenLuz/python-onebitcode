# Desafios – Módulo 3 (Módulos e Bibliotecas)

Objetivo: Usar bibliotecas padrão e externas em aplicações práticas, subindo de dificuldade até projetos integradores.

---

## Nível 1 — Aquecimento
- [ ] Criar módulo próprio (`utils/`) com função `slugify`.
- [ ] `os`: listar conteúdo de diretório (cwd, contar arquivos/pastas, top-5 maiores).
- [ ] `webbrowser`: abrir site, corrigir URL faltando http(s).
- [ ] `math/statistics`: CLI para raiz, fatorial e média.
- [ ] `re`: capturar letras [a-m] em texto.
- [ ] `hashlib`: função `hash_senha` com salt.
- [ ] `json`: dump de dicionário e leitura seletiva de chave.
- [ ] `collections`: usar `Counter`, `namedtuple` e `deque`.
- [ ] `random`: número 1–100, choice em lista, embaralhar baralho.
- [ ] `tkinter`: janela mínima com campo de texto, botão e label.
- [ ] `venv + requirements`: criar ambiente virtual e gerar `requirements.txt`.

---

## Nível 2 — Aplicando e Combinando
- [ ] Scanner de pastas (`os` + `json`) com ignore patterns.
- [ ] Regex avançado: e-mails, CEPs, datas.
- [ ] Estatísticas de notas (`statistics`): média, mediana, variância, outliers.
- [ ] Hash seguro: `criar_usuario` + `login` (`hmac.compare_digest`).
- [ ] Simulação de dados (`random`): 100k rolagens de 2d6, salvar CSV.
- [ ] `tkinter`: app para abrir JSON, buscar chave e mostrar valor (threading para não travar).

---

## Nível 3 — Engenharia de Software
- [ ] Transformar utilitários em pacote `ktools` com `pyproject.toml`.
- [ ] Usar `.env` para configurações (`python-dotenv`).
- [ ] Logging estruturado (`logging`, arquivo `app.log`).
- [ ] Testes com `pytest` (cobertura ≥ 85%).
- [ ] Regex: validar CPF (formato e dígito verificador).
- [ ] Implementar cache LRU com `deque` + `dict`.
- [ ] `tkinter`: janela com 2 abas (Scanner / Hash de senha), com progress bar.

---

## Nível 4 — Integração e Polimento
- [ ] CLI raiz `ktools` com subcomandos (`scan`, `regex`, `hash`, `stats`, `rand`, `jsonview`).
- [ ] Saída em múltiplos formatos (`json|csv|md`) gravada em `./out/`.
- [ ] Todos os módulos com opção `--seed` para determinismo.
- [ ] Empacotamento/distribuição (`python -m build`, wheel instalável).
- [ ] README com instruções de instalação e uso.

---

## Projetos
### A) Explorer de Arquivos Inteligente (Desktop)
- [ ] Explorer: lista e navegação de pastas.
- [ ] Estatísticas: tamanho total, maiores arquivos, extensões, média/mediana.
- [ ] Buscador regex: e-mail, CEP, data, CPF.
- [ ] Salvar/carregar sessão em JSON.
- [ ] Exportar relatórios em `.md` e `.json`.
- [ ] UI responsiva com progress bar.

### B) Senha+ (Segurança leve com boa UX)
- [ ] CLI + GUI para carteira de credenciais (`usuario`, `salt`, `hash`).
- [ ] Validação de login com `hmac.compare_digest`.
- [ ] Avaliador de força de senha com regex.
- [ ] Gerador de senhas com `random` + seed.
- [ ] Histórico de logins (`deque`).
- [ ] Cobertura de testes ≥ 90% para criptografia/validação.

---

## Bônus Mini-Desafios
- [ ] Regex sem lookaheads → comparar performance.
- [ ] Counter vs dict → benchmark simples.
- [ ] LRU manual vs `functools.lru_cache`.
- [ ] Teste de fairness (chi-quadrado simples) na simulação 2d6.
- [ ] Suporte a `pathlib` além de `os.path`.

---

# Estrutura de Repositório
/ktools
  /ktools
    __init__.py
    cli.py
    utils/
    ui/
  /tests
  /data
  /out
  README.md
  pyproject.toml
  requirements.txt
